#!/bin/bash

# sysinfo_page - A script to produce an html file

# <<- tells cat to ignore indents so we can format the file without worrying about tabs

#### Constants

TITLE="System Information for $HOSTNAME"
RIGHT_NOW="$(date +"%x %r %z")"
TIME_STAMP="Updated on $RIGHT_NOW by $USER"

#### Functions

number_fact()
{
    python json_parse.py
}


system_info()
{
    echo "<h2> System Release Info </h2>"
    echo "<p> Function not yet implemented </p>"
}

show_uptime()
{
    echo "<h2> System Uptime </h2>"
    echo "<pre>"
    uptime
    echo "</pre>"
}

drive_space()
{
    echo "<h2> Filesystem Space"
    echo "<pre>"
    df
    echo "</pre"
}

home_space()
{
    echo "<h2> Home Directory Space by User </h2>"
    if [ "$(id -u)" = "0" ]; then
        echo "<pre>"
        echo "Bytes Directory"
        du -s /home/* | sort -nr
        echo "</pre>"
    else
        echo "Sudo did not run this script, info not available."
    fi
}



write_page()
{
    cat <<- _EOF_
    <html>
       <head>
         <title>
           $TITLE
         </title>
       </head>

       <body>
         <h1> $TITLE </h1>
           <p> $TIME_STAMP </p>
           $(system_info)
           $(show_uptime)
           $(drive_space)
           $(home_space)
         <h1> A number Fact for You </h1>
            $(number_fact)
         <p>
           <small>
              a product of the free numbers api from <a href="https://rapidapi.com/divad12/api/numbers-1/"> rapidapi.com </a>
           </small>
         </p>
         </body>
    </html>
_EOF_
}

usage()
{
    echo "usage: sysinfo [[[-f file] [-i]] | [-h]]"
}

##### Main

interactive=
filename=sysinfo_page.html

while [ "$1" != "" ]; do
    case $1 in
        -f | --file )             shift
                                  filename=$1
                                  ;;
        -i | --interactive )      interactive=1
         			  ;;
	-h | --help )		  usage
				  exit
				  ;;
	* ) 			  usage
				  exit 1
    esac
    shift
done

# Test code to test interactive

if [ "$interactive" = "1" ]; then
    response=

    read -p "Enter name of output file [$filename] > " response
    if [ -n "$response" ]; then
	filename="$response"
    fi

    if [ -f $filename ]; then
	echo -n "Output file exists, overwrite? [Y/n] > "
	read response
	if [ "$response" != "y" ] && [ "$response" != "" ]; then
	    echo "Exiting program."
	    exit 1
	fi
        echo "Overwriting file $filename"
    fi
fi
# Write page (comment out until testing is complete)

# write_page > $filename


